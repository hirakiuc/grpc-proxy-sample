// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxy

import (
	context "context"
	A "github.com/hirakiuc/grpc-proxy-sample/proto/A"
	B "github.com/hirakiuc/grpc-proxy-sample/proto/B"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BffClient is the client API for Bff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BffClient interface {
	Greeting(ctx context.Context, in *GreetingRequest, opts ...grpc.CallOption) (*GreetingReply, error)
}

type bffClient struct {
	cc grpc.ClientConnInterface
}

func NewBffClient(cc grpc.ClientConnInterface) BffClient {
	return &bffClient{cc}
}

func (c *bffClient) Greeting(ctx context.Context, in *GreetingRequest, opts ...grpc.CallOption) (*GreetingReply, error) {
	out := new(GreetingReply)
	err := c.cc.Invoke(ctx, "/proxy.Bff/Greeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BffServer is the server API for Bff service.
// All implementations must embed UnimplementedBffServer
// for forward compatibility
type BffServer interface {
	Greeting(context.Context, *GreetingRequest) (*GreetingReply, error)
	mustEmbedUnimplementedBffServer()
}

// UnimplementedBffServer must be embedded to have forward compatible implementations.
type UnimplementedBffServer struct {
}

func (UnimplementedBffServer) Greeting(context.Context, *GreetingRequest) (*GreetingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greeting not implemented")
}
func (UnimplementedBffServer) mustEmbedUnimplementedBffServer() {}

// UnsafeBffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BffServer will
// result in compilation errors.
type UnsafeBffServer interface {
	mustEmbedUnimplementedBffServer()
}

func RegisterBffServer(s grpc.ServiceRegistrar, srv BffServer) {
	s.RegisterService(&Bff_ServiceDesc, srv)
}

func _Bff_Greeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServer).Greeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Bff/Greeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServer).Greeting(ctx, req.(*GreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bff_ServiceDesc is the grpc.ServiceDesc for Bff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Bff",
	HandlerType: (*BffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeting",
			Handler:    _Bff_Greeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy/api.proto",
}

// BackendAClient is the client API for BackendA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendAClient interface {
	SayHello(ctx context.Context, in *A.HelloRequest, opts ...grpc.CallOption) (*A.HelloReply, error)
}

type backendAClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendAClient(cc grpc.ClientConnInterface) BackendAClient {
	return &backendAClient{cc}
}

func (c *backendAClient) SayHello(ctx context.Context, in *A.HelloRequest, opts ...grpc.CallOption) (*A.HelloReply, error) {
	out := new(A.HelloReply)
	err := c.cc.Invoke(ctx, "/proxy.BackendA/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendAServer is the server API for BackendA service.
// All implementations must embed UnimplementedBackendAServer
// for forward compatibility
type BackendAServer interface {
	SayHello(context.Context, *A.HelloRequest) (*A.HelloReply, error)
	mustEmbedUnimplementedBackendAServer()
}

// UnimplementedBackendAServer must be embedded to have forward compatible implementations.
type UnimplementedBackendAServer struct {
}

func (UnimplementedBackendAServer) SayHello(context.Context, *A.HelloRequest) (*A.HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedBackendAServer) mustEmbedUnimplementedBackendAServer() {}

// UnsafeBackendAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendAServer will
// result in compilation errors.
type UnsafeBackendAServer interface {
	mustEmbedUnimplementedBackendAServer()
}

func RegisterBackendAServer(s grpc.ServiceRegistrar, srv BackendAServer) {
	s.RegisterService(&BackendA_ServiceDesc, srv)
}

func _BackendA_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(A.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendAServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.BackendA/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendAServer).SayHello(ctx, req.(*A.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendA_ServiceDesc is the grpc.ServiceDesc for BackendA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.BackendA",
	HandlerType: (*BackendAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _BackendA_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy/api.proto",
}

// BackendBClient is the client API for BackendB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendBClient interface {
	SayBye(ctx context.Context, in *B.ByeRequest, opts ...grpc.CallOption) (*B.ByeReply, error)
}

type backendBClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendBClient(cc grpc.ClientConnInterface) BackendBClient {
	return &backendBClient{cc}
}

func (c *backendBClient) SayBye(ctx context.Context, in *B.ByeRequest, opts ...grpc.CallOption) (*B.ByeReply, error) {
	out := new(B.ByeReply)
	err := c.cc.Invoke(ctx, "/proxy.BackendB/SayBye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendBServer is the server API for BackendB service.
// All implementations must embed UnimplementedBackendBServer
// for forward compatibility
type BackendBServer interface {
	SayBye(context.Context, *B.ByeRequest) (*B.ByeReply, error)
	mustEmbedUnimplementedBackendBServer()
}

// UnimplementedBackendBServer must be embedded to have forward compatible implementations.
type UnimplementedBackendBServer struct {
}

func (UnimplementedBackendBServer) SayBye(context.Context, *B.ByeRequest) (*B.ByeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayBye not implemented")
}
func (UnimplementedBackendBServer) mustEmbedUnimplementedBackendBServer() {}

// UnsafeBackendBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendBServer will
// result in compilation errors.
type UnsafeBackendBServer interface {
	mustEmbedUnimplementedBackendBServer()
}

func RegisterBackendBServer(s grpc.ServiceRegistrar, srv BackendBServer) {
	s.RegisterService(&BackendB_ServiceDesc, srv)
}

func _BackendB_SayBye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(B.ByeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendBServer).SayBye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.BackendB/SayBye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendBServer).SayBye(ctx, req.(*B.ByeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendB_ServiceDesc is the grpc.ServiceDesc for BackendB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.BackendB",
	HandlerType: (*BackendBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayBye",
			Handler:    _BackendB_SayBye_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy/api.proto",
}
